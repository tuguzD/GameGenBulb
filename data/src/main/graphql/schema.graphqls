type AccessData {
  token: String!
}

type AnalysisCriterion {
  id: UUID!

  name: String!

  description: String

  createDate: String!

  updateDate: String
}

input AnalysisCriterionFilters {
  id: UUID
}

type AppSettings {
  id: UUID!

  user: User!

  theme: Theme!

  disability: Disability

  textSize: PositiveInt
}

input AppSettingsFilters {
  id: UUID
}

"""
Built-in Boolean
"""
scalar Boolean

type Card {
  id: UUID!

  deck: CardDeck!

  type: CardType!

  name: String!

  description: String!

  image: DiscImage

  createDate: DateTime!

  updateDate: DateTime
}

type CardDeck {
  id: UUID!

  author: User!

  name: String!

  description: String!

  image: DiscImage

  isPublic: Boolean!

  createDate: DateTime!

  updateDate: DateTime
}

input CardDeckFilters {
  id: UUID
}

input CardFilters {
  id: UUID
}

type CardType {
  id: UUID!

  name: String!

  description: String!

  image: DiscImage

  createDate: DateTime!

  updateDate: DateTime
}

input CardTypeFilters {
  id: UUID
}

type CategoryGroup {
  id: UUID!

  image: DiscImage

  name: String!

  description: String!

  createDate: DateTime!

  updateDate: DateTime
}

input CategoryGroupFilters {
  id: UUID
}

type CategorySuggestion {
  id: UUID!

  group: CategoryGroup

  category: GameCategory

  author: User!

  title: String!

  explanation: String!

  suggestDate: DateTime!
}

input CategorySuggestionFilters {
  id: UUID
}

type Credentials {
  id: UUID!

  service: OAuthService!

  userAccessData: AccessData!

  createDate: DateTime!

  updateDate: DateTime
}

input CredentialsFilters {
  id: UUID
}

type DataSourceLink {
  id: UUID!

  source: GameDataSource!

  link: Url!

  createDate: DateTime!

  updateDate: DateTime
}

input DataSourceLinkFilters {
  id: UUID
}

"""
An RFC-3339 compliant DateTime Scalar
"""
scalar DateTime

type Disability {
  id: UUID!

  name: String!

  description: String

  createDate: DateTime!

  updateDate: DateTime
}

input DisabilityFilters {
  id: UUID
}

type DiscImage {
  id: UUID!

  path: Url!

  description: String

  createDate: DateTime!

  updateDate: DateTime
}

input DiscImageFilters {
  id: UUID
}

enum ErrorDetail {
  """
  Unknown error.

  This error should only be returned when no other error detail applies.
  If a client sees an unknown errorDetail, it will be interpreted as UNKNOWN.

  HTTP Mapping: 500 Internal Server Error
  """
  UNKNOWN

  """
  The requested field is not found in the schema.

  This differs from `NOT_FOUND` in that `NOT_FOUND` should be used when a
  query is valid, but is unable to return a result (if, for example, a
  specific video id doesn't exist). `FIELD_NOT_FOUND` is intended to be
  returned by the server to signify that the requested field is not known to exist.
  This may be returned in lieu of failing the entire query.
  See also `PERMISSION_DENIED` for cases where the
  requested field is invalid only for the given user or class of users.

  HTTP Mapping: 404 Not Found
  Error Type: BAD_REQUEST
  """
  FIELD_NOT_FOUND

  """
  The provided cursor is not valid.

  The most common usage for this error is when a client is paginating
  through a list that uses stateful cursors. In that case, the provided
  cursor may be expired.

  HTTP Mapping: 404 Not Found
  Error Type: NOT_FOUND
  """
  INVALID_CURSOR

  """
  The operation is not implemented or is not currently supported/enabled.

  HTTP Mapping: 501 Not Implemented
  Error Type: BAD_REQUEST
  """
  UNIMPLEMENTED

  """
  The client specified an invalid argument.

  Note that this differs from `FAILED_PRECONDITION`.
  `INVALID_ARGUMENT` indicates arguments that are problematic
  regardless of the state of the system (e.g., a malformed file name).

  HTTP Mapping: 400 Bad Request
  Error Type: BAD_REQUEST
  """
  INVALID_ARGUMENT

  """
  The deadline expired before the operation could complete.

  For operations that change the state of the system, this error
  may be returned even if the operation has completed successfully.
  For example, a successful response from a server could have been
  delayed long enough for the deadline to expire.

  HTTP Mapping: 504 Gateway Timeout
  Error Type: UNAVAILABLE
  """
  DEADLINE_EXCEEDED

  """
  Service Error.

  There is a problem with an upstream service.

  This may be returned if a gateway receives an unknown error from a service
  or if a service is unreachable.
  If a request times out which waiting on a response from a service,
  `DEADLINE_EXCEEDED` may be returned instead.
  If a service returns a more specific error Type, the specific error Type may
  be returned instead.

  HTTP Mapping: 502 Bad Gateway
  Error Type: UNAVAILABLE
  """
  SERVICE_ERROR

  """
  Request throttled based on server CPU limits

  HTTP Mapping: 503 Unavailable.
  Error Type: UNAVAILABLE
  """
  THROTTLED_CPU

  """
  Request throttled based on server concurrency limits.

  HTTP Mapping: 503 Unavailable
  Error Type: UNAVAILABLE
  """
  THROTTLED_CONCURRENCY

  """
  The server detected that the client is exhibiting a behavior that
  might be generating excessive load.

  HTTP Mapping: 429 Too Many Requests or 420 Enhance Your Calm
  Error Type: UNAVAILABLE
  """
  ENHANCE_YOUR_CALM

  """
  Request failed due to network errors.

  HTTP Mapping: 503 Unavailable
  Error Type: UNAVAILABLE
  """
  TCP_FAILURE

  """
  Unable to perform operation because a required resource is missing.

  Example: Client is attempting to refresh a list, but the specified
  list is expired. This requires an action by the client to get a new list.

  If the user is simply trying GET a resource that is not found,
  use the NOT_FOUND error type. FAILED_PRECONDITION.MISSING_RESOURCE
  is to be used particularly when the user is performing an operation
  that requires a particular resource to exist.

  HTTP Mapping: 400 Bad Request or 500 Internal Server Error
  Error Type: FAILED_PRECONDITION
  """
  MISSING_RESOURCE
}

enum ErrorType {
  """
  Unknown error.

  For example, this error may be returned when
  an error code received from another address space belongs to
  an error space that is not known in this address space.  Also
  errors raised by APIs that do not return enough error information
  may be converted to this error.

  If a client sees an unknown errorType, it will be interpreted as UNKNOWN.
  Unknown errors MUST NOT trigger any special behavior. These MAY be treated
  by an implementation as being equivalent to INTERNAL.

  When possible, a more specific error should be provided.

  HTTP Mapping: 520 Unknown Error
  """
  UNKNOWN

  """
  Internal error.

  An unexpected internal error was encountered. This means that some
  invariants expected by the underlying system have been broken.
  This error code is reserved for serious errors.

  HTTP Mapping: 500 Internal Server Error
  """
  INTERNAL

  """
  The requested entity was not found.

  This could apply to a resource that has never existed (e.g. bad resource id),
  or a resource that no longer exists (e.g. cache expired.)

  Note to server developers: if a request is denied for an entire class
  of users, such as gradual feature rollout or undocumented allowlist,
  `NOT_FOUND` may be used. If a request is denied for some users within
  a class of users, such as user-based access control, `PERMISSION_DENIED`
  must be used.

  HTTP Mapping: 404 Not Found
  """
  NOT_FOUND

  """
  The request does not have valid authentication credentials.

  This is intended to be returned only for routes that require
  authentication.

  HTTP Mapping: 401 Unauthorized
  """
  UNAUTHENTICATED

  """
  The caller does not have permission to execute the specified
  operation.

  `PERMISSION_DENIED` must not be used for rejections
  caused by exhausting some resource or quota.
  `PERMISSION_DENIED` must not be used if the caller
  cannot be identified (use `UNAUTHENTICATED`
  instead for those errors).

  This error Type does not imply the
  request is valid or the requested entity exists or satisfies
  other pre-conditions.

  HTTP Mapping: 403 Forbidden
  """
  PERMISSION_DENIED

  """
  Bad Request.

  There is a problem with the request.
  Retrying the same request is not likely to succeed.
  An example would be a query or argument that cannot be deserialized.

  HTTP Mapping: 400 Bad Request
  """
  BAD_REQUEST

  """
  Currently Unavailable.

  The service is currently unavailable.  This is most likely a
  transient condition, which can be corrected by retrying with
  a backoff.

  HTTP Mapping: 503 Unavailable
  """
  UNAVAILABLE

  """
  The operation was rejected because the system is not in a state
  required for the operation's execution.  For example, the directory
  to be deleted is non-empty, an rmdir operation is applied to
  a non-directory, etc.

  Service implementers can use the following guidelines to decide
  between `FAILED_PRECONDITION` and `UNAVAILABLE`:

  - Use `UNAVAILABLE` if the client can retry just the failing call.
  - Use `FAILED_PRECONDITION` if the client should not retry until
  the system state has been explicitly fixed.  E.g., if an "rmdir"
       fails because the directory is non-empty, `FAILED_PRECONDITION`
  should be returned since the client should not retry unless
  the files are deleted from the directory.

  HTTP Mapping: 400 Bad Request or 500 Internal Server Error
  """
  FAILED_PRECONDITION
}

type FieldData {
  id: UUID!

  field: SessionField!

  author: User!

  inputData: String

  votedUsers: [User!]
}

input FieldDataFilters {
  id: UUID
}

type Game {
  id: UUID!
  name: String!
  description: String
  socialMedia: [MediaLink!]
  dataSource: [DataSourceLink!]
  category: [GameCategory!]
  publishDate: DateTime
  updateDate: DateTime
}

type GameCategory {
  id: UUID!

  image: DiscImage

  group: CategoryGroup!

  name: String!

  description: String!

  createDate: DateTime!

  updateDate: DateTime
}

input GameCategoryFilters {
  id: UUID
}

type GameComment {
  id: UUID!

  game: Game!

  author: User!

  title: String

  comment: String

  voteMark: PositiveInt!

  createDate: DateTime!

  updateDate: DateTime
}

input GameCommentFilters {
  id: UUID
}

type GameDataSource {
  id: UUID!

  name: String!

  description: String

  createDate: DateTime!

  updateDate: DateTime
}

input GameDataSourceFilters {
  id: UUID
}

input GameFilters {
  id: UUID
}

type GameIdea {
  id: UUID!
  image: DiscImage
  authors: [User!]
  permittedUsers: [User!]
  name: String!
  description: String!
  isPublic: Boolean!
  socialMedia: [MediaLink!]
  category: [GameCategory!]
  publishDate: DateTime
  createDate: DateTime!
  updateDate: DateTime
}

type GameIdeaComment {
  id: UUID!

  author: User!

  gameIdea: GameIdea!

  title: String

  comment: String

  voteMark: PositiveInt!

  createDate: DateTime!

  updateDate: DateTime
}

input GameIdeaCommentFilters {
  id: UUID
}

input GameIdeaFilters {
  id: UUID
}

type IdeaAnalysis {
  id: UUID!

  gameIdea: GameIdea!

  criterion: AnalysisCriterion!

  similarGames: [Game!]

  similarIdeas: [GameIdea!]

  predictedPosition: PositiveInt

  predictedValue: PositiveInt
}

input IdeaAnalysisFilters {
  id: UUID
}

type IdeationMethod {
  id: UUID!

  name: String!

  description: String

  avgDuration: PositiveInt!

  avgUserCount: PositiveInt!

  createDate: DateTime!

  updateDate: DateTime
}

input IdeationMethodFilters {
  id: UUID
}

"""
Built-in Int
"""
scalar Int

type InvitedUser {
  user: User!

  isActive: Boolean!

  role: SessionRole
}

type MediaLink {
  id: UUID!

  media: SocialMedia!

  link: Url!

  createDate: DateTime!

  updateDate: DateTime
}

input MediaLinkFilters {
  id: UUID
}

"""
 Root mutation object of the service.
 "Create", "Update" and "Delete" operations used by client to modify data on the server
"""
type Mutation {
  """
   Creates new game idea with provided name and description in the system, will be owned by the user that created it
  """
  createGameIdea(userID: UUID!, name: String!, description: String!, isPublic: Boolean!): GameIdea!

  """
   Updates existing game idea provided by ID with new provided data
  """
  updateGameIdea(ideaID: UUID!, updateData: UpdateGameIdea!): GameIdea!

  """
   Deletes existing game idea provided by ID
  """
  deleteGameIdea(ideaID: UUID!): GameIdea!

  """
   Creates analysis of the game idea with provided analysis criterion
  """
  startIdeaAnalysis(gameIdeaID: UUID!, analysisCriterionID: UUID!): IdeaAnalysis!

  """
   Creates game category suggestion with provided data, author will be the user that created it
  """
  createCategorySuggestion(userID: UUID!, title: String!, explanation: String!, groupID: UUID): CategorySuggestion!

  """
   Updates category suggestion provided by ID which results in it being approved or declined
  """
  updateCategorySuggestion(suggestionID: UUID!, updateData: UpdateCategorySuggestion!): CategorySuggestion
}

type Notification {
  id: UUID!

  type: NotificationType!

  title: String!

  message: String!

  author: User

  recipient: User!

  sendDate: DateTime!

  receiveDate: DateTime
}

input NotificationFilters {
  id: UUID
}

type NotificationParameter {
  type: NotificationType!

  needSound: Boolean
}

type NotificationType {
  id: UUID!

  name: String!

  description: String

  createDate: DateTime!

  updateDate: DateTime
}

input NotificationTypeFilters {
  id: UUID
}

type OAuthService {
  id: UUID!

  appAccessData: AccessData!

  name: String!

  description: String

  createDate: DateTime!

  updateDate: DateTime
}

input OAuthServiceFilters {
  id: UUID
}

type Permission {
  id: UUID!

  group: PermissionGroup!

  name: String!

  description: String

  createDate: DateTime!

  updateDate: DateTime
}

input PermissionFilters {
  id: UUID
}

type PermissionGroup {
  id: UUID!

  role: SystemRole!

  name: String!

  description: String

  createDate: DateTime!

  updateDate: DateTime
}

input PermissionGroupFilters {
  id: UUID
}

"""
An Int scalar that must be a positive value
"""
scalar PositiveInt

"""
 Root query object of the service.
 "Read" operations used by client to retrieve data from the server
"""
type Query {
  """
   Filter all users present in the system
  """
  users(filters: UserFilters!): [User!]

  """
   Filter all system roles present in the system
  """
  systemRoles(filters: SystemRoleFilters!): [SystemRole!]

  """
   Filter all notifications generated by various user actions in the system
  """
  notifications(filters: NotificationFilters!): [Notification!]

  """
   Filter all games which data is being used in the system
  """
  games(filters: GameFilters!): [Game!]

  """
   Filter all game categories which are being used in the system
  """
  gameCategories(filters: GameCategoryFilters!): [GameCategory!]

  """
   Filter all game ideas generated by users of the system
  """
  gameIdeas(filters: GameIdeaFilters!): [GameIdea!]

  """
   Filter all idea analyzes generated by users of the system
  """
  ideaAnalyzes(filters: IdeaAnalysisFilters!): [IdeaAnalysis!]

  """
   Filter all analysis criteria present in the system
  """
  analysisCriteria(filters: AnalysisCriterionFilters!): [AnalysisCriterion!]

  """
   Filter all sessions in which users of the system are able to participate
  """
  sessions(filters: SessionFilters!): [Session!]

  """
   Filter all session roles of ideation methods present in the system
  """
  sessionRoles(filters: SessionRoleFilters!): [SessionRole!]

  """
   Filter all ideation methods present in the system
  """
  ideationMethods(filters: IdeationMethodFilters!): [IdeationMethod!]

  """
   Filters all disabilities available in the client application
  """
  disabilities(filters: DisabilityFilters!): [Disability!]

  """
   Filters all themes available in the client application
  """
  themes(filters: ThemeFilters!): [Theme!]

  """
   Filters all application settings used in the client application
  """
  appSettings(filters: AppSettingsFilters!): [AppSettings!]

  """
   Filters all card decks present in the system
  """
  cardDecks(filters: CardDeckFilters!): [CardDeck!]

  """
   Filters all cards present in the system
  """
  cards(filters: CardFilters!): [Card!]

  """
   Filters all card types present in the system
  """
  cardTypes(filters: CardTypeFilters!): [CardType!]

  """
   Filters all OAuth services which users are able to use to sign in
  """
  oauthServices(filters: OAuthServiceFilters!): [OAuthService!]

  """
   Filters all images stored on the disc in the system
  """
  discImages(filters: DiscImageFilters!): [DiscImage!]

  """
   Filters all game data sources which system is able to use
  """
  gameDataSources(filters: GameDataSourceFilters!): [GameDataSource!]

  """
   Filters all game data source links used in the system
  """
  dataSourceLinks(filters: DataSourceLinkFilters!): [DataSourceLink!]

  """
   Filters all social media platforms which system is able to use
  """
  socialMedia(filters: SocialMediaFilters!): [SocialMedia!]

  """
   Filter all social media links used in the system
  """
  mediaLinks(filters: MediaLinkFilters!): [MediaLink!]

  """
   Filter all game comments written by users of the system
  """
  gameComments(filters: GameCommentFilters!): [GameComment!]

  """
   Filter all game category groups which are being used in the system
  """
  categoryGroups(filters: CategoryGroupFilters!): [CategoryGroup!]

  """
   Filter all game category suggestions written by users of the system
  """
  categorySuggestions(filters: CategorySuggestionFilters!): [CategorySuggestion!]

  """
   Filter all game idea comments written by users of the system
  """
  gameIdeaComments(filters: GameIdeaCommentFilters!): [GameIdeaComment!]

  """
   Filter all results of sessions in which users of the system participated
  """
  sessionResults(filters: SessionResultFilters!): [SessionResult!]

  """
   Filter all session fields which are being used in sessions of the system
  """
  sessionFields(filters: SessionFieldFilters!): [SessionField!]

  """
   Filter all field data for session fields written by users of the system
  """
  fieldData(filters: FieldDataFilters!): [FieldData!]

  """
   Filter all notification types present in the system
  """
  notificationTypes(filters: NotificationTypeFilters!): [NotificationType!]

  """
   Filter all permissions being granted for roles of the system
  """
  permissions(filters: PermissionFilters!): [Permission!]

  """
   Filter all permission groups present in the system
  """
  permissionGroups(filters: PermissionGroupFilters!): [PermissionGroup!]

  """
   Filter all system access methods of users present in the system
  """
  systemAccesses(filters: SystemAccessFilters!): [SystemAccess!]

  """
   Filter all personal settings of users present in the system
  """
  userSettings(filters: UserSettingsFilters!): [UserSettings!]

  shows(titleFilter: String): [Show]

  _service: _Service!
}

type Session {
  id: UUID!

  method: IdeationMethod!

  admin: User!

  participants: [InvitedUser!]

  tasks: [String!]

  startDate: DateTime

  duration: PositiveInt!
}

type SessionField {
  id: UUID!

  session: Session!

  role: SessionRole

  title: String!

  description: String

  isPublic: Boolean
}

input SessionFieldFilters {
  id: UUID
}

input SessionFilters {
  id: UUID
}

type SessionResult {
  id: UUID!

  session: Session!

  gameIdeas: [GameIdea!]

  isPublic: Boolean
}

input SessionResultFilters {
  id: UUID
}

type SessionRole {
  id: UUID!

  method: IdeationMethod!

  name: String!

  description: String

  createDate: DateTime!

  updateDate: DateTime
}

input SessionRoleFilters {
  id: UUID
}

type Show {
  title: String

  releaseYear: Int
}

type SocialMedia {
  id: UUID!

  name: String!

  description: String

  createDate: DateTime!

  updateDate: DateTime
}

input SocialMediaFilters {
  id: UUID
}

"""
Built-in String
"""
scalar String

"""
 Root subscription object of the service.
 Long-lasting "Read" operations that update their result whenever a particular server-side event occurs
"""
type Subscription {
  """
   Subscribe for all incoming notifications to the user
  """
  receiveNotifications(" User subscribing, provided by ID" userID: UUID!): Notification!

  """
   Subscribe for all game category suggestions written by users of the system
  """
  receiveCategorySuggestions: CategorySuggestion!

  """
   Subscribe for all comments of the game favourited or by the user
  """
  receiveGameComments(" Game to subscribe on, provided by ID" gameID: UUID!, " User subscribing, provided by ID" userID: UUID!): GameComment!

  """
   Subscribe for all comments of the game idea favourited or created by the user
  """
  receiveGameIdeaComments(" Game idea to subscribe on, provided by ID" gameIdeaID: UUID!, " User subscribing, provided by ID" userID: UUID!): GameIdeaComment!

  """
   Subscribe for completion of analysis initiated by the user
  """
  receiveIdeaAnalysisResult(" Idea analysis to subscribe on, provided by ID" ideaAnalysisID: UUID!, " User subscribing, provided by ID" userID: UUID!): IdeaAnalysis!

  """
   Subscribe for fields user needs to fill as a participant of the session
  """
  receiveSessionFields(" Session to subscribe on, provided by ID" sessionID: UUID!, " User subscribing, provided by ID" userID: UUID!): SessionField!

  """
   Subscribe for votes that participants of the session made
  """
  receiveFieldDataVotes(" Session field to subscribe on, provided by ID" fieldID: UUID!, " User subscribing, provided by ID" userID: UUID!): FieldData!
}

type SystemAccess {
  id: UUID!

  user: User!

  role: SystemRole!

  login: String!

  password: String

  credentials: [Credentials!]

  socialMedia: [MediaLink!]
}

input SystemAccessFilters {
  id: UUID
}

type SystemRole {
  id: UUID!

  name: String!

  description: String

  createDate: DateTime!

  updateDate: DateTime
}

input SystemRoleFilters {
  id: UUID
}

type Theme {
  id: UUID!

  name: String!

  description: String

  createDate: DateTime!

  updateDate: DateTime
}

input ThemeFilters {
  id: UUID
}

"""
A universally unique identifier compliant UUID Scalar
"""
scalar UUID

input UpdateAnalysisCriterion {
  id: UUID
}

input UpdateAppSettings {
  id: UUID
}

input UpdateCard {
  id: UUID
}

input UpdateCardDeck {
  id: UUID
}

input UpdateCardType {
  id: UUID
}

input UpdateCategoryGroup {
  id: UUID
}

input UpdateCategorySuggestion {
  id: UUID
}

input UpdateCredentials {
  id: UUID
}

input UpdateDataSourceLink {
  id: UUID
}

input UpdateDisability {
  id: UUID
}

input UpdateDiscImage {
  id: UUID
}

input UpdateFieldData {
  id: UUID
}

input UpdateGame {
  id: UUID
}

input UpdateGameCategory {
  id: UUID
}

input UpdateGameComments {
  id: UUID
}

input UpdateGameDataSource {
  id: UUID
}

input UpdateGameIdea {
  id: UUID
}

input UpdateGameIdeaComment {
  id: UUID
}

input UpdateIdeaAnalysis {
  id: UUID
}

input UpdateIdeationMethod {
  id: UUID
}

input UpdateMediaLink {
  id: UUID
}

input UpdateNotificationType {
  id: UUID
}

input UpdateOAuthService {
  id: UUID
}

input UpdatePermission {
  id: UUID
}

input UpdatePermissionGroup {
  id: UUID
}

input UpdateSession {
  id: UUID
}

input UpdateSessionField {
  id: UUID
}

input UpdateSessionResult {
  id: UUID
}

input UpdateSessionRole {
  id: UUID
}

input UpdateSocialMedia {
  id: UUID
}

input UpdateSystemAccess {
  id: UUID
}

input UpdateSystemRole {
  id: UUID
}

input UpdateTheme {
  id: UUID
}

input UpdateUser {
  id: UUID
}

input UpdateUserSettings {
  id: UUID
}

"""
A Url scalar
"""
scalar Url

type User {
  id: UUID!

  name: String!

  displayName: String!

  role: UserRole!

  email: String

  avatarUrl: String
}

enum UserRole {
  USER

  GUEST

  MODERATOR

  ADMINISTRATOR
}

#type User {
#  id: UUID!
#
#  image: DiscImage
#
#  name: String
#
#  surname: String
#
#  createDate: DateTime!
#
#  updateDate: DateTime
#}

input UserFilters {
  id: UUID
}

type UserSettings {
  id: UUID!

  user: User!

  emailAddress: String

  phoneNumber: String

  notifications: [NotificationParameter!]
}

input UserSettingsFilters {
  id: UUID
}

scalar _FieldSet

type _Service {
  sdl: String!
}

type __Directive {
  """
  The __Directive type represents a Directive that a server supports.
  """
  name: String!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  onOperation: Boolean @deprecated(reason: "Use `locations`.")

  onFragment: Boolean @deprecated(reason: "Use `locations`.")

  onField: Boolean @deprecated(reason: "Use `locations`.")
}

"""
An enum describing valid locations where a directive can be placed
"""
enum __DirectiveLocation {
  """
  Indicates the directive is valid on queries.
  """
  QUERY

  """
  Indicates the directive is valid on mutations.
  """
  MUTATION

  """
  Indicates the directive is valid on subscriptions.
  """
  SUBSCRIPTION

  """
  Indicates the directive is valid on fields.
  """
  FIELD

  """
  Indicates the directive is valid on fragment definitions.
  """
  FRAGMENT_DEFINITION

  """
  Indicates the directive is valid on fragment spreads.
  """
  FRAGMENT_SPREAD

  """
  Indicates the directive is valid on inline fragments.
  """
  INLINE_FRAGMENT

  """
  Indicates the directive is valid on variable definitions.
  """
  VARIABLE_DEFINITION

  """
  Indicates the directive is valid on a schema SDL definition.
  """
  SCHEMA

  """
  Indicates the directive is valid on a scalar SDL definition.
  """
  SCALAR

  """
  Indicates the directive is valid on an object SDL definition.
  """
  OBJECT

  """
  Indicates the directive is valid on a field SDL definition.
  """
  FIELD_DEFINITION

  """
  Indicates the directive is valid on a field argument SDL definition.
  """
  ARGUMENT_DEFINITION

  """
  Indicates the directive is valid on an interface SDL definition.
  """
  INTERFACE

  """
  Indicates the directive is valid on an union SDL definition.
  """
  UNION

  """
  Indicates the directive is valid on an enum SDL definition.
  """
  ENUM

  """
  Indicates the directive is valid on an enum value SDL definition.
  """
  ENUM_VALUE

  """
  Indicates the directive is valid on an input object SDL definition.
  """
  INPUT_OBJECT

  """
  Indicates the directive is valid on an input object field SDL definition.
  """
  INPUT_FIELD_DEFINITION
}

type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

type __Field {
  name: String!

  description: String

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

type __InputValue {
  name: String!

  description: String

  type: __Type!

  defaultValue: String

  isDeprecated: Boolean

  deprecationReason: String
}

"""
A GraphQL Introspection defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  'A list of all directives supported by this server.
  """
  directives: [__Directive!]!

  """
  'If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type
}

type __Type {
  kind: __TypeKind!

  name: String

  description: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  ofType: __Type

  specifiedByUrl: String
}

"""
An enum describing what kind of type a given __Type is
"""
enum __TypeKind {
  """
  Indicates this type is a scalar. 'specifiedByUrl' is a valid field
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
Directs the executor to include this field or fragment only when the `if` argument is true
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

directive @extends on OBJECT|INTERFACE

directive @external on FIELD_DEFINITION

directive @key (fields: _FieldSet!) repeatable on OBJECT|INTERFACE

directive @provides (fields: _FieldSet!) on FIELD_DEFINITION

directive @requires (fields: _FieldSet!) on FIELD_DEFINITION

"""
Marks the field, argument, input field or enum value as deprecated
"""
directive @deprecated ("The reason for the deprecation" reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|ENUM_VALUE|INPUT_FIELD_DEFINITION

"""
Exposes a URL that specifies the behaviour of this scalar.
"""
directive @specifiedBy ("The URL that specifies the behaviour of this scalar." url: String!) on SCALAR

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
